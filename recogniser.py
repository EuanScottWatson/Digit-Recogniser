import pygame, os
from pygame.locals import *
import numpy as np
import tensorflow as tf


class Recogniser():
    def __init__(self) -> None:
        self.values = np.zeros((28, 28))
        self.model = tf.keras.models.load_model('mnist.model')
        self.values = np.array([
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.08267188, 0.08242551, 0.31950096, 0.23429731, 0.30678591, 0.1617313 , 0.14263068, 0.15475563, 0.06962253, 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.1471783 , 0.27568713, 0.34181342, 0.31537859, 0.32703436, 0.31777005, 0.31682306, 0.31699507, 0.32263892, 0.30557332, 0.29111634, 0.29704901, 0.32230098, 0.14474158, 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0.34773648, 0.40110131, 0.32770357, 0.28769296, 0.33114752, 0.34338608, 0.32552054, 0.32455045, 0.31699507, 0.32263892, 0.30557332, 0.29111634, 0.29704901, 0.32230098, 0.36277003, 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0.59089057, 0.40757068, 0.32770357, 0.22929983, 0.31406451, 0.23437463, 0.22218069, 0.13136566, 0.13782394, 0.04993221, 0.04729111, 0.04505372, 0.19449638, 0.32230098, 0.45071428, 0.68494879, 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0.59089057, 0.40757068, 0.32770357, 0.14811915, 0.05781941, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.01650272, 0.06778552, 0.09710511, 0.17562789, 0. , 0. , 0. ,                0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0.33466368, 0.40757068, 0.32770357, 0.09399869, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0.24576864, 0.40757068, 0.32770357, 0.13672537, 0.05387718, 0.05586837, 0.02454322, 0.02447007, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0.0915096 , 0.34449427, 0.32770357, 0.35890409, 0.33114752, 0.34338608, 0.26222488, 0.26144342, 0.20172414, 0.13315257, 0.02061407, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.13100486, 0.32770357, 0.35890409, 0.33114752, 0.34338608, 0.32552054, 0.32455045, 0.31699507, 0.32263892, 0.25828221, 0.12129848, 0.01178766, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.13100486, 0.32770357, 0.35890409, 0.33114752, 0.34338608, 0.32552054, 0.32455045, 0.31699507, 0.32263892, 0.30557332, 0.29111634, 0.21807169, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.0468148 , 0.22502716, 0.30749413, 0.1989459 , 0.23638992, 0.25371603, 0.23931248, 0.32391923, 0.30678591, 0.29227157, 0.29822778, 0.1649874 , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.00427267, 0.01445485, 0.00272529, 0.00775049, 0.00901529, 0.00751767, 0.17796353, 0.2922348 , 0.29111634, 0.29704901, 0.31846406, 0.13924506, 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.02788963, 0.25068352, 0.29704901, 0.32230098, 0.234518  , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.24606262, 0.29704901, 0.32230098, 0.45071428, 0.68494879, 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.13338518, 0.28187456, 0.29704901, 0.32230098, 0.40307781, 0.17562789, 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.01950617, 0.01993912, 0. , 0. , 0.04133594, 0.06954653, 0.2343007 , 0.23813825, 0.29708517, 0.29111634, 0.29704901, 0.32230098, 0.38842043, 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.20546494, 0.27487495, 0.2273354 , 0.23573727, 0.28289285, 0.32455045, 0.31699507, 0.32263892, 0.30557332, 0.29111634, 0.29704901, 0.31079023, 0.19787456, 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.1417448 , 0.34893453, 0.33114752, 0.34338608, 0.32552054, 0.32455045, 0.31699507, 0.32263892, 0.30557332, 0.29111634, 0.28879765, 0.13812899, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.25208739, 0.31669267, 0.34338608, 0.32552054, 0.32455045, 0.31699507, 0.31495704, 0.28859702, 0.27494321, 0.12494919, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0.02496747, 0.1798689 , 0.32552054, 0.32455045, 0.15035339, 0.08834161, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
            [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ]
        ])


    def draw_lines(self, screen):
        for i in range(28):
            pygame.draw.line(screen, (0, 0, 0), (0, i * 20), (560, i * 20))
            pygame.draw.line(screen, (0, 0, 0), (i * 20, 0), (i * 20, 560))

    def draw_digit(self, screen):
        for i in range(28):
            for j in range(28):
                rect = pygame.Rect(i * 20, j * 20, 20, 20)
                pygame.draw.rect(screen, [(1 - self.values[j][i]) * 255] * 3, rect)

    def display(self, screen):
        self.draw_digit(screen)
        self.draw_lines(screen)

    def draw(self):
        pos = pygame.mouse.get_pos()
        y, x = pos[0] // 20, pos[1] // 20
        if pygame.mouse.get_pressed()[0] and self.values[x][y] < 0.5:
            self.values[x][y] = 0.5
            if 0 < x < 27 and 0 < y < 27:
                self.values[x-1][y] = min(0.5, self.values[x-1][y] + 0.4)
                self.values[x+1][y] = min(0.5, self.values[x+1][y] + 0.4)
                self.values[x][y-1] = min(0.5, self.values[x][y-1] + 0.4)
                self.values[x][y+1] = min(0.5, self.values[x][y+1] + 0.4)
        elif pygame.mouse.get_pressed()[2] and self.values[x][y] > 0:
            self.values[x][y] = 0
            if 0 < x < 27 and 0 < y < 27:
                self.values[x-1][y] = max(0, self.values[x-1][y] - 0.4)
                self.values[x+1][y] = max(0, self.values[x+1][y] - 0.4)
                self.values[x][y-1] = max(0, self.values[x][y-1] - 0.4)
                self.values[x][y+1] = max(0, self.values[x][y+1] - 0.4)

    def events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return True
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    return True
                if event.key == K_SPACE:
                    self.predict()
                if event.key == K_c:
                    self.values = np.zeros((28, 28))

    def display_screen(self, screen):
        screen.fill((255, 255, 255))

        self.display(screen)

        pygame.display.update()
        pygame.display.flip()

    def run_logic(self):
        self.draw()

    def predict(self):
        pred = self.model.predict(np.expand_dims(self.values, axis=0))
        digit = np.argmax(pred[0])
        print(str(digit) + ": {:.2%}".format(pred[0][digit]))


if __name__ == "__main__":
    pygame.init()
    pygame.font.init()
    pygame.display.set_caption("Arcade Machine")

    os.environ['SDL_VIDEO_CENTERED'] = "True"

    width, height = 560, 560

    screen = pygame.display.set_mode((width, height))

    done = False
    clock = pygame.time.Clock()
    recogniser = Recogniser()

    while not done:
        done = recogniser.events()
        recogniser.run_logic()
        recogniser.display_screen(screen)

        clock.tick(60)


    